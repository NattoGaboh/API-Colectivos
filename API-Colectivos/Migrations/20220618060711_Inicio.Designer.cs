// <auto-generated />
using System;
using API_Colectivos.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Colectivos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220618060711_Inicio")]
    partial class Inicio
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API_Colectivos.Domain.Models.Colectivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime");

                    b.Property<string>("Horario")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdDistrito")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoTranposrte")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoTransporte")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Paradero")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdDistrito");

                    b.HasIndex("IdTipoTransporte");

                    b.ToTable("Colectivo");
                });

            modelBuilder.Entity("API_Colectivos.Domain.Models.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Departamento");
                });

            modelBuilder.Entity("API_Colectivos.Domain.Models.Distrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdProvincia")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdProvincia");

                    b.ToTable("Distrito");
                });

            modelBuilder.Entity("API_Colectivos.Domain.Models.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdDepto")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepto");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("API_Colectivos.Domain.Models.Ruta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Ruta");
                });

            modelBuilder.Entity("API_Colectivos.Domain.Models.RutaColectivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdColectivo")
                        .HasColumnType("int");

                    b.Property<int>("IdRuta")
                        .HasColumnType("int");

                    b.Property<double>("Tarifa")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("IdColectivo");

                    b.HasIndex("IdRuta");

                    b.ToTable("RutaColectivo");
                });

            modelBuilder.Entity("API_Colectivos.Domain.Models.TipoTransporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TipoTransporte");
                });

            modelBuilder.Entity("API_Colectivos.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("API_Colectivos.Domain.Models.Colectivo", b =>
                {
                    b.HasOne("API_Colectivos.Domain.Models.Distrito", "Distrito")
                        .WithMany()
                        .HasForeignKey("IdDistrito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Colectivos.Domain.Models.TipoTransporte", "TipoTransporte")
                        .WithMany()
                        .HasForeignKey("IdTipoTransporte");

                    b.Navigation("Distrito");

                    b.Navigation("TipoTransporte");
                });

            modelBuilder.Entity("API_Colectivos.Domain.Models.Distrito", b =>
                {
                    b.HasOne("API_Colectivos.Domain.Models.Provincia", "Provincia")
                        .WithMany()
                        .HasForeignKey("IdProvincia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("API_Colectivos.Domain.Models.Provincia", b =>
                {
                    b.HasOne("API_Colectivos.Domain.Models.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("IdDepto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("API_Colectivos.Domain.Models.RutaColectivo", b =>
                {
                    b.HasOne("API_Colectivos.Domain.Models.Colectivo", "Colectivo")
                        .WithMany()
                        .HasForeignKey("IdColectivo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Colectivos.Domain.Models.Ruta", "Ruta")
                        .WithMany()
                        .HasForeignKey("IdRuta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colectivo");

                    b.Navigation("Ruta");
                });
#pragma warning restore 612, 618
        }
    }
}
